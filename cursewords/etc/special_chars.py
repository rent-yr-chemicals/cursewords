#coding=utf-8

class ndict(dict):

    def __getitem__(self,keys):
            if not isinstance(keys,list):
                keys = list(keys)
            result = self
            for key in keys:
                    result = dict.__getitem__(result,key)
            return result

BLOCK = '█'

plain_ints = {
    (1,1,1,1): '╋',
    (0,0,0,1): '┏',
    (0,0,1,0): '┓',
    (0,1,0,0): '┗',
    (1,0,0,0): '┛',
    (0,1,0,1): '┣',
    (0,0,1,1): '┳',
    (1,0,1,0): '┫',
    (1,1,0,0): '┻',
}

intersections = ndict({
    'b': {
        'b': {
            'b': {'b': '█', 'p': 'ⓛ', 's': '⓿'},
            'n': {'n': 'Ⓤ'},
            'p': {'b': 'ⓙ', 'p': 'ⓗ', 's': '⓷'},
            's': {'b': '⓽', 'p': '⓵'}
        },
        'n': {
            'b': {'n': 'Ⓧ'},
            'n': {'n': '⒮'},
            'p': {'n': '⒲'},
            's': {'n': 'Ⓕ'}
        },
        'p': {
            'b': {'b': 'ⓚ', 'p': 'ⓖ', 's': '⓻'},
            'n': {'n': 'Ⓙ'},
            'p': {'b': 'ⓓ', 'p': 'Ⓨ', 's': '⓯'},
            's': {'b': '⓱', 'p': 'ⓥ'}
        },
        's': {
            'b': {'b': '⓾', 'p': '⓺'},
            'n': {'n': 'Ⓡ'},
            'p': {'b': '⓲', 'p': '⓪'}
        }
    },
    'n': {
        'b': {
            'n': {'b': 'Ⓦ', 'n': '⒰', 'p': '⒴', 's':'Ⓗ'}
        },
        'n': {
            'b': {'b': 'Ⓥ', 'n': '⒯', 'p': 'Ⓚ', 's': 'Ⓣ'},
            'n': {'b': '⒱', 'p': '┌', 's': '╔', 'n': ''},
            'p': {'b': 'Ⓛ', 'n': '┐', 'p': '┬', 's': 'Ⓟ'},
            's': {'b': 'Ⓢ', 'n': '╗', 'p': 'Ⓞ'}
        },
        'p': {
            'n': {'b': '⒵', 'n': '└', 'p': '├', 's': 'Ⓓ'}
        },
        's': {
            'n': {'b': 'Ⓖ', 'n': '╚', 'p': 'Ⓒ'}
        }
    },
    'p': {
        'b': {
            'b': {'b': 'ⓘ', 'p': 'ⓒ', 's': '⓳'},
            'n': {'n': 'Ⓘ'},
            'p': {'b': 'ⓕ', 'p': 'ⓐ', 's': 'ⓧ'},
            's': {'b': '⓹', 'p': '⓭'}
        },
        'n': {
            'b': {'n': '⒳'},
            'n': {'n': '┘'},
            'p': {'n': '┤'},
            's': {'n': 'Ⓑ'}
        },
        'p': {
            'b': {'b': 'ⓔ', 'p': 'Ⓩ', 's': '⓫'},
            'n': {'n': '┴'},
            'p': {'b': 'ⓑ', 'p': '┼', 's': 'ⓡ'},
            's': {'b': 'ⓩ', 'p': 'ⓣ'}
        },
        's': {
            'b': {'b': '⓶', 'p': '⓮'},
            'n': {'n': 'Ⓝ'},
            'p': {'b': 'ⓦ', 'p': 'ⓢ'}
        }
    },
    's': {
        'b': {
            'b': {'b': '⓼', 'p': '⓰'},
            'n': {'n': 'Ⓠ'},
            'p': {'b': '⓸', 'p': 'ⓨ'}
        },
        'n': {
            'b': {'n': 'Ⓔ'},
            'n': {'n': '╝'},
            'p': {'n': 'Ⓐ'}
        },
        'p': {
            'b': {'b': '⓴', 'p': 'ⓤ'},
            'n': {'n': 'Ⓜ'},
            'p': {'b': '⓬', 'p': 'ⓠ'}
        }
    }
})

lines = ndict({
    'h':{
        'b': {'n': chr(0xE800+0b00001010), 'p': chr(0xE800+0b00001010), 's': 'ⓝ', 'b': '█'},
        'n': {'b': chr(0xE800+0b10100000), 'p': '─', 's': '═', 'n': ''},
        'p': {'b': chr(0xE800+0b10100000), 'n': '─', 'p': '─', 's': '═'},
        's': {'b': 'ⓜ', 'n': '═', 'p': '═'}
    },
    'v':{
        'b': {'n': chr(0xE800+0b00100010), 'p': chr(0xE800+0b00100010), 's': 'ⓟ', 'b': '█'},
        'n': {'b': chr(0xE800+0b10001000), 'p': '│', 's': '║', 'n': ''},
        'p': {'b': chr(0xE800+0b10001000), 'n': '│', 'p': '│', 's': '║'},
        's': {'b': 'ⓞ', 'n': '║', 'p':'║'}
    }
})

def webding_to_unicode(num):
    return next(pair[1] for pair in webding_codes if pair[0] == num)

def unicode_to_webding(num):
    return next(pair[0] for pair in webding_codes if pair[1] == num)

webding_codes = [
    (32,32),
    (33,128375),
    (34,128376),
    (35,128370),
    (36,128374),
    (37,127942),
    (38,127894),
    (39,128391),
    (40,128488),
    (41,128489),
    (42,128496),
    (43,128497),
    (44,127798),
    (45,127895),
    (46,128638),
    (47,128636),
    (48,128469),
    (49,128470),
    (50,128471),
    (51,9204),
    (52,9205),
    (53,9206),
    (54,9207),
    (55,9194),
    (56,9193),
    (57,9198),
    (58,9197),
    (59,9208),
    (60,9209),
    (61,9210),
    (62,128474),
    (63,128499),
    (64,128736),
    (65,127959),
    (66,127960),
    (67,127961),
    (68,127962),
    (69,127964),
    (70,127981),
    (71,127963),
    (72,127968),
    (73,127958),
    (74,127965),
    (75,128739),
    (76,128269),
    (77,127956),
    (78,128065),
    (79,128066),
    (80,127966),
    (81,127957),
    (82,128740),
    (83,127967),
    (84,128755),
    (85,128364),
    (86,128363),
    (87,128360),
    (88,128264),
    (89,127892),
    (90,127893),
    (91,128492),
    (92,128637),
    (93,128493),
    (94,128490),
    (95,128491),
    (96,11156),
    (97,10004),
    (98,128690),
    (99,9633),
    (100,128737),
    (101,128230),
    (102,128753),
    (103,9632),
    (104,128657),
    (105,128712),
    (106,128745),
    (107,128752),
    (108,128968),
    (109,128372),
    (110,9899),
    (111,128741),
    (112,128660),
    (113,128472),
    (114,128473),
    (115,10067),
    (116,128754),
    (117,128647),
    (118,128653),
    (119,9971),
    (120,128711),
    (121,8854),
    (122,128685),
    (123,128494),
    (124,124),
    (125,128495),
    (126,128498),
    (128,128697),
    (129,128698),
    (130,128713),
    (131,128714),
    (132,128700),
    (133,128125),
    (134,127947),
    (135,9975),
    (136,127938),
    (137,127948),
    (138,127946),
    (139,127940),
    (140,127949),
    (141,127950),
    (142,128664),
    (143,128480),
    (144,128738),
    (145,128176),
    (146,127991),
    (147,128179),
    (148,128106),
    (149,128481),
    (150,128482),
    (151,128483),
    (152,10031),
    (153,128388),
    (154,128389),
    (155,128387),
    (156,128390),
    (157,128441),
    (158,128442),
    (159,128443),
    (160,128373),
    (161,128368),
    (162,128445),
    (163,128446),
    (164,128203),
    (165,128466),
    (166,128467),
    (167,128214),
    (168,128218),
    (169,128478),
    (170,128479),
    (171,128451),
    (172,128450),
    (173,128444),
    (174,127917),
    (175,127900),
    (176,127896),
    (177,127897),
    (178,127911),
    (179,128191),
    (180,127902),
    (181,128247),
    (182,127903),
    (183,127916),
    (184,128253),
    (185,128249),
    (186,128254),
    (187,128251),
    (188,127898),
    (189,127899),
    (190,128250),
    (191,128187),
    (192,128421),
    (193,128422),
    (194,128423),
    (195,128377),
    (196,127918),
    (197,128379),
    (198,128380),
    (199,128223),
    (200,128385),
    (201,128384),
    (202,128424),
    (203,128425),
    (204,128447),
    (205,128426),
    (206,128476),
    (207,128274),
    (208,128275),
    (209,128477),
    (210,128229),
    (211,128594),
    (212,128371),
    (213,127779),
    (214,127780),
    (215,127781),
    (216,127782),
    (217,9729),
    (218,127783),
    (219,127784),
    (220,127785),
    (221,127786),
    (222,127788),
    (223,127787),
    (224,127772),
    (225,127777),
    (226,128715),
    (227,128719),
    (228,127869),
    (229,127864),
    (230,128718),
    (231,128717),
    (232,9413),
    (233,9855),
    (234,128710),
    (235,128392),
    (236,127891),
    (237,128484),
    (238,128485),
    (239,128486),
    (240,128487),
    (241,128746),
    (242,128063),
    (243,128038),
    (244,128031),
    (245,128021),
    (246,128008),
    (247,128620),
    (248,128622),
    (249,128621),
    (250,128623),
    (251,128506),
    (252,127757),
    (253,127759),
    (254,127758),
    (255,128330)
]